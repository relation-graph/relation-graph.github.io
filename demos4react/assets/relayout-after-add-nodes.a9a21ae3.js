import{r as l,a}from"./index.7473cb17.js";import{u as p}from"./relation-graph.26f01d58.js";import{I as x}from"./index.e712a3dd.js";const D=()=>{const c=l.exports.useRef(null),f={defaultNodeColor:"transparent",defaultNodeBorderWidth:0,defaultNodeBorderColor:"transpanret",defaultLineColor:"rgba(128, 128, 255)",defaultNodeShape:1,toolBarDirection:"h",toolBarPositionH:"right",toolBarPositionV:"bottom",defaultPolyLineRadius:10,defaultLineShape:4,defaultLineWidth:2,defaultJunctionPoint:"lr",defaultLineTextOffset_y:-4,layout:{layoutName:"tree",from:"left",min_per_width:210,max_per_width:210,min_per_height:80,max_per_height:80}},s={rootId:"a",nodes:[{id:"a",text:"a",children:[{id:"b",text:"b",children:[{id:"b1",text:"b1",children:[{id:"b1-add-button",text:"add node",disableDefaultClickEffect:!0,data:{myType:"my-add-button"}}]},{id:"b2",text:"b2",children:[{id:"b2-1",text:"b2-1",children:[{id:"b2-1-add-button",text:"add node",disableDefaultClickEffect:!0,data:{myType:"my-add-button"}}]},{id:"b2-2",text:"b2-2",children:[{id:"b2-2-add-button",text:"add node",disableDefaultClickEffect:!0,data:{myType:"my-add-button"}}]},{id:"b2-add-button",text:"add node",data:{myType:"my-add-button"}}]},{id:"b-add-button",text:"add node",disableDefaultClickEffect:!0,data:{myType:"my-add-button"}}]},{id:"c",text:"c",children:[{id:"c1",text:"c1",children:[{id:"c1-add-button",text:"add node",data:{myType:"my-add-button"}}]},{id:"c2",text:"c2",children:[{id:"c2-add-button",text:"add node",disableDefaultClickEffect:!0,data:{myType:"my-add-button"}}]},{id:"c3",text:"c3",children:[{id:"c3-add-button",text:"add node",disableDefaultClickEffect:!0,data:{myType:"my-add-button"}}]},{id:"c-add-button",text:"add node",disableDefaultClickEffect:!0,data:{myType:"my-add-button"}}]},{id:"a-add-button",text:"add node",disableDefaultClickEffect:!0,data:{myType:"my-add-button"}}]}],lines:[]};l.exports.useEffect(()=>{y()},[]);const y=async()=>{await u()},u=async()=>{var d;const t=(d=c.current)==null?void 0:d.getInstance();await(t==null?void 0:t.setJsonData(s))},i=(t,d)=>{if(d)for(const e of d){if(e.id===t)return e;if(console.log(e.id,t),!e.children)continue;const o=i(t,e.children);if(o)return o}else return i(t,s.nodes)},m=async t=>{const d=t.lot.parent;console.log(" find ",d.id);const e=i(d.id),o=Math.ceil(Math.random()*3);for(let n=0;n<o;n++){console.log(n," of ",o);const r="N-"+Math.ceil(Math.random()*9999);e.children.push({id:r,text:r,children:[{id:r+"-add-button",text:"add node",disableNodeClickEffect:!0,data:{myType:"my-add-button"}}]})}e.children.sort((n,h)=>n.data&&n.data.myType==="my-add-button"?1:-1),console.log(o,e.children),await u()},b=l.exports.useCallback(({node:t})=>a("div",{className:"w-full h-full",children:t.data&&t.data.myType==="my-add-button"?a("div",{className:"my-add-button cursor-pointer",onClick:()=>m(t),children:a(x,{size:"20px",name:"circle_plus"})}):a("div",{className:"my-node",children:t.text})}),[]);return a("div",{children:a("div",{className:"my-graph",style:{height:"100vh"},children:a(p,{ref:c,options:f,nodeSlot:b})})})};export{D as default};
