import{r as d,j as n,a as t}from"./index.7473cb17.js";import{u as p}from"./relation-graph.26f01d58.js";const y=()=>{const l=d.exports.useRef(null),s=d.exports.useRef(null),u={debug:!1,layouts:[{layoutName:"tree",from:"top",min_per_width:70,max_per_width:200,min_per_height:200,max_per_height:400}],allowShowMiniToolBar:!1,defaultNodeShape:1,defaultLineShape:4,defaultNodeBorderWidth:0,defaultNodeColor:"rgba(0, 206, 209, 1)",defaultNodeWidth:30,defaultNodeHeight:100,defaultJunctionPoint:"tb"},w={debug:!1,layouts:[{layoutName:"tree",from:"top",min_per_width:70,max_per_width:200,min_per_height:200,max_per_height:400}],allowShowMiniToolBar:!1,defaultNodeShape:1,defaultLineShape:4,defaultNodeBorderWidth:0,defaultNodeColor:"rgba(0, 206, 209, 1)",defaultNodeWidth:30,defaultNodeHeight:100,defaultJunctionPoint:"tb"};d.exports.useEffect(()=>{m()},[]);const m=async()=>{const o=l.current;await h(o,"graph1");const a=s.current;await h(a,"graph2")},h=async(o,a)=>{let e,r,i;a==="graph2"&&(e=!0,r=!1,i="#ff0000"),o&&await x(o,{rootId:"a",nodes:[{id:"a",text:"Root Node a"},{id:"R-b",text:"R-b"},{id:"R-c",text:"R-c",expandHolderPosition:"top"},{id:"R-c-1",text:"R-c-1"},{id:"R-c-2",text:"R-c-2"},{id:"R-d",text:"R-d"},{id:"b",text:"b"},{id:"c",text:"c",expandHolderPosition:"bottom"},{id:"c1",text:"c1"},{id:"c2",text:"c2"},{id:"c3",text:"c3"},{id:"d",text:"d"},{id:"e",text:"e"}],lines:[{from:"R-b",to:"a",showStartArrow:e,showEndArrow:r,color:i},{from:"R-c",to:"a",showStartArrow:e,showEndArrow:r,color:i},{from:"R-c-1",to:"R-c",showStartArrow:e,showEndArrow:r,color:i},{from:"R-c-2",to:"R-c",showStartArrow:e,showEndArrow:r,color:i},{from:"R-d",to:"a",showStartArrow:e,showEndArrow:r,color:i},{from:"a",to:"b"},{from:"a",to:"c"},{from:"c",to:"c1"},{from:"c",to:"c2"},{from:"c",to:"c3"},{from:"a",to:"d"},{from:"a",to:"e"}]})},x=async(o,a)=>{const e=o.getInstance();await e.setJsonData(a),await e.moveToCenter(),await e.zoomToFit(),await e.focusNodeById("a")},c=(o,a)=>{console.log("onNodeClick:",o)},f=(o,a,e)=>{console.log("onLineClick:",o)};return n("div",{className:"flex w-full",children:[t("div",{style:{height:"calc(100vh)",width:"calc((100% - 300px) / 2)"},children:t(p,{ref:l,options:u,onNodeClick:c,onLineClick:f})}),t("div",{style:{height:"calc(100vh)",width:"300px",borderLeft:"#efefef solid 1px",borderRight:"#efefef solid 1px",padding:"15px",fontSize:"14px",lineHeight:"25px"},children:n("ul",{children:[t("li",{children:"The relationships in the original data are all top-down. Only in this way can the bidirectional tree expand from the root node up and down at the same time."}),t("li",{children:"If you want to display the arrows above the root node pointing upwards and the arrows below the root node pointing downwards, you can set the properties of all lines above:"}),n("ul",{children:[t("li",{children:"showStartArrow=true"}),t("li",{children:"showEndArrow=false"})]}),t("li",{children:"This makes the lines above appear to be displayed in reverse."}),t("li",{children:"Finally, you can set the relationship from top to bottom through from and to to meet the requirements of bidirectional tree data. But you can also use showStartArrow=true;showEndArrow=false to make the arrows above point upwards."})]})}),t("div",{style:{height:"calc(100vh)",width:"calc((100% - 300px) / 2)"},children:t(p,{ref:s,options:w,onNodeClick:c,onLineClick:f})})]})};export{y as default};
