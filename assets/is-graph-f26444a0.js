import{g as Y}from"./index-c847f99a.js";var H={exports:{}},M=typeof Reflect=="object"?Reflect:null,ee=M&&typeof M.apply=="function"?M.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)},T;M&&typeof M.ownKeys=="function"?T=M.ownKeys:Object.getOwnPropertySymbols?T=function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:T=function(e){return Object.getOwnPropertyNames(e)};function Ue(n){console&&console.warn&&console.warn(n)}var oe=Number.isNaN||function(e){return e!==e};function w(){w.init.call(this)}H.exports=w;H.exports.once=je;w.EventEmitter=w;w.prototype._events=void 0;w.prototype._eventsCount=0;w.prototype._maxListeners=void 0;var te=10;function W(n){if(typeof n!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n)}Object.defineProperty(w,"defaultMaxListeners",{enumerable:!0,get:function(){return te},set:function(n){if(typeof n!="number"||n<0||oe(n))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+n+".");te=n}});w.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};w.prototype.setMaxListeners=function(e){if(typeof e!="number"||e<0||oe(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this};function se(n){return n._maxListeners===void 0?w.defaultMaxListeners:n._maxListeners}w.prototype.getMaxListeners=function(){return se(this)};w.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var r=e==="error",o=this._events;if(o!==void 0)r=r&&o.error===void 0;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var d=o[e];if(d===void 0)return!1;if(typeof d=="function")ee(d,this,t);else for(var u=d.length,c=ce(d,u),i=0;i<u;++i)ee(c[i],this,t);return!0};function ae(n,e,t,i){var r,o,s;if(W(t),o=n._events,o===void 0?(o=n._events=Object.create(null),n._eventsCount=0):(o.newListener!==void 0&&(n.emit("newListener",e,t.listener?t.listener:t),o=n._events),s=o[e]),s===void 0)s=o[e]=t,++n._eventsCount;else if(typeof s=="function"?s=o[e]=i?[t,s]:[s,t]:i?s.unshift(t):s.push(t),r=se(n),r>0&&s.length>r&&!s.warned){s.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=n,a.type=e,a.count=s.length,Ue(a)}return n}w.prototype.addListener=function(e,t){return ae(this,e,t,!1)};w.prototype.on=w.prototype.addListener;w.prototype.prependListener=function(e,t){return ae(this,e,t,!0)};function Oe(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function ue(n,e,t){var i={fired:!1,wrapFn:void 0,target:n,type:e,listener:t},r=Oe.bind(i);return r.listener=t,i.wrapFn=r,r}w.prototype.once=function(e,t){return W(t),this.on(e,ue(this,e,t)),this};w.prototype.prependOnceListener=function(e,t){return W(t),this.prependListener(e,ue(this,e,t)),this};w.prototype.removeListener=function(e,t){var i,r,o,s,a;if(W(t),r=this._events,r===void 0)return this;if(i=r[e],i===void 0)return this;if(i===t||i.listener===t)--this._eventsCount===0?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,i.listener||t));else if(typeof i!="function"){for(o=-1,s=i.length-1;s>=0;s--)if(i[s]===t||i[s].listener===t){a=i[s].listener,o=s;break}if(o<0)return this;o===0?i.shift():Me(i,o),i.length===1&&(r[e]=i[0]),r.removeListener!==void 0&&this.emit("removeListener",e,a||t)}return this};w.prototype.off=w.prototype.removeListener;w.prototype.removeAllListeners=function(e){var t,i,r;if(i=this._events,i===void 0)return this;if(i.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):i[e]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete i[e]),this;if(arguments.length===0){var o=Object.keys(i),s;for(r=0;r<o.length;++r)s=o[r],s!=="removeListener"&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(t=i[e],typeof t=="function")this.removeListener(e,t);else if(t!==void 0)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this};function de(n,e,t){var i=n._events;if(i===void 0)return[];var r=i[e];return r===void 0?[]:typeof r=="function"?t?[r.listener||r]:[r]:t?Ce(r):ce(r,r.length)}w.prototype.listeners=function(e){return de(this,e,!0)};w.prototype.rawListeners=function(e){return de(this,e,!1)};w.listenerCount=function(n,e){return typeof n.listenerCount=="function"?n.listenerCount(e):he.call(n,e)};w.prototype.listenerCount=he;function he(n){var e=this._events;if(e!==void 0){var t=e[n];if(typeof t=="function")return 1;if(t!==void 0)return t.length}return 0}w.prototype.eventNames=function(){return this._eventsCount>0?T(this._events):[]};function ce(n,e){for(var t=new Array(e),i=0;i<e;++i)t[i]=n[i];return t}function Me(n,e){for(;e+1<n.length;e++)n[e]=n[e+1];n.pop()}function Ce(n){for(var e=new Array(n.length),t=0;t<e.length;++t)e[t]=n[t].listener||n[t];return e}function je(n,e){return new Promise(function(t,i){function r(s){n.removeListener(e,o),i(s)}function o(){typeof n.removeListener=="function"&&n.removeListener("error",r),t([].slice.call(arguments))}fe(n,e,o,{once:!0}),e!=="error"&&Ie(n,r,{once:!0})})}function Ie(n,e,t){typeof n.on=="function"&&fe(n,"error",e,t)}function fe(n,e,t,i){if(typeof n.on=="function")i.once?n.once(e,t):n.on(e,t);else if(typeof n.addEventListener=="function")n.addEventListener(e,function r(o){i.once&&n.removeEventListener(e,r),t(o)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof n)}var Re=H.exports;function N(n){if(typeof n!="function")throw new Error("obliterator/iterator: expecting a function!");this.next=n}typeof Symbol<"u"&&(N.prototype[Symbol.iterator]=function(){return this});N.of=function(){var n=arguments,e=n.length,t=0;return new N(function(){return t>=e?{done:!0}:{done:!1,value:n[t++]}})};N.empty=function(){var n=new N(function(){return{done:!0}});return n};N.fromSequence=function(n){var e=0,t=n.length;return new N(function(){return e>=t?{done:!0}:{done:!1,value:n[e++]}})};N.is=function(n){return n instanceof N?!0:typeof n=="object"&&n!==null&&typeof n.next=="function"};var V=N;const A=Y(V);var q={};q.ARRAY_BUFFER_SUPPORT=typeof ArrayBuffer<"u";q.SYMBOL_SUPPORT=typeof Symbol<"u";var ze=V,pe=q,Pe=pe.ARRAY_BUFFER_SUPPORT,Te=pe.SYMBOL_SUPPORT;function We(n){return typeof n=="string"||Array.isArray(n)||Pe&&ArrayBuffer.isView(n)?ze.fromSequence(n):typeof n!="object"||n===null?null:Te&&typeof n[Symbol.iterator]=="function"?n[Symbol.iterator]():typeof n.next=="function"?n:null}var le=function(e){var t=We(e);if(!t)throw new Error("obliterator: target is not iterable nor a valid iterator.");return t},Ke=le,Fe=function(e,t){for(var i=arguments.length>1?t:1/0,r=i!==1/0?new Array(i):[],o,s=0,a=Ke(e);;){if(s===i)return r;if(o=a.next(),o.done)return s!==t&&(r.length=s),r;r[s++]=o.value}};const ge=Y(Fe);var Be=V,Ye=le,He=function(){var e=arguments,t=null,i=-1;return new Be(function(){var o=null;do{if(t===null){if(i++,i>=e.length)return{done:!0};t=Ye(e[i])}if(o=t.next(),o.done===!0){t=null;continue}break}while(!0);return o})};const S=Y(He);function Ve(){const n=arguments[0];for(let e=1,t=arguments.length;e<t;e++)if(arguments[e])for(const i in arguments[e])n[i]=arguments[e][i];return n}let v=Ve;typeof Object.assign=="function"&&(v=Object.assign);function x(n,e,t,i){const r=n._nodes.get(e);let o=null;return r&&(i==="mixed"?o=r.out&&r.out[t]||r.undirected&&r.undirected[t]:i==="directed"?o=r.out&&r.out[t]:o=r.undirected&&r.undirected[t]),o}function $(n){return typeof n=="object"&&n!==null}function ye(n){let e;for(e in n)return!1;return!0}function k(n,e,t){Object.defineProperty(n,e,{enumerable:!1,configurable:!1,writable:!0,value:t})}function D(n,e,t){const i={enumerable:!0,configurable:!0};typeof t=="function"?i.get=t:(i.value=t,i.writable=!1),Object.defineProperty(n,e,i)}function ie(n){return!(!$(n)||n.attributes&&!Array.isArray(n.attributes))}function qe(){let n=Math.floor(Math.random()*256)&255;return()=>n++}class J extends Error{constructor(e){super(),this.name="GraphError",this.message=e}}class l extends J{constructor(e){super(e),this.name="InvalidArgumentsGraphError",typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,l.prototype.constructor)}}class f extends J{constructor(e){super(e),this.name="NotFoundGraphError",typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,f.prototype.constructor)}}class g extends J{constructor(e){super(e),this.name="UsageGraphError",typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,g.prototype.constructor)}}function we(n,e){this.key=n,this.attributes=e,this.clear()}we.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.undirectedLoops=0,this.directedLoops=0,this.in={},this.out={},this.undirected={}};function me(n,e){this.key=n,this.attributes=e,this.clear()}me.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.directedLoops=0,this.in={},this.out={}};function be(n,e){this.key=n,this.attributes=e,this.clear()}be.prototype.clear=function(){this.undirectedDegree=0,this.undirectedLoops=0,this.undirected={}};function C(n,e,t,i,r){this.key=e,this.attributes=r,this.undirected=n,this.source=t,this.target=i}C.prototype.attach=function(){let n="out",e="in";this.undirected&&(n=e="undirected");const t=this.source.key,i=this.target.key;this.source[n][i]=this,!(this.undirected&&t===i)&&(this.target[e][t]=this)};C.prototype.attachMulti=function(){let n="out",e="in";const t=this.source.key,i=this.target.key;this.undirected&&(n=e="undirected");const r=this.source[n],o=r[i];if(typeof o>"u"){r[i]=this,this.undirected&&t===i||(this.target[e][t]=this);return}o.previous=this,this.next=o,r[i]=this,this.target[e][t]=this};C.prototype.detach=function(){const n=this.source.key,e=this.target.key;let t="out",i="in";this.undirected&&(t=i="undirected"),delete this.source[t][e],delete this.target[i][n]};C.prototype.detachMulti=function(){const n=this.source.key,e=this.target.key;let t="out",i="in";this.undirected&&(t=i="undirected"),this.previous===void 0?this.next===void 0?(delete this.source[t][e],delete this.target[i][n]):(this.next.previous=void 0,this.source[t][e]=this.next,this.target[i][n]=this.next):(this.previous.next=this.next,this.next!==void 0&&(this.next.previous=this.previous))};const ve=0,$e=1,Je=2,_e=3;function U(n,e,t,i,r,o,s){let a,d,u,c;if(i=""+i,t===ve){if(a=n._nodes.get(i),!a)throw new f(`Graph.${e}: could not find the "${i}" node in the graph.`);u=r,c=o}else if(t===_e){if(r=""+r,d=n._edges.get(r),!d)throw new f(`Graph.${e}: could not find the "${r}" edge in the graph.`);const h=d.source.key,p=d.target.key;if(i===h)a=d.target;else if(i===p)a=d.source;else throw new f(`Graph.${e}: the "${i}" node is not attached to the "${r}" edge (${h}, ${p}).`);u=o,c=s}else{if(d=n._edges.get(i),!d)throw new f(`Graph.${e}: could not find the "${i}" edge in the graph.`);t===$e?a=d.source:a=d.target,u=r,c=o}return[a,u,c]}function Qe(n,e,t){n.prototype[e]=function(i,r,o){const[s,a]=U(this,e,t,i,r,o);return s.attributes[a]}}function Xe(n,e,t){n.prototype[e]=function(i,r){const[o]=U(this,e,t,i,r);return o.attributes}}function Ze(n,e,t){n.prototype[e]=function(i,r,o){const[s,a]=U(this,e,t,i,r,o);return s.attributes.hasOwnProperty(a)}}function et(n,e,t){n.prototype[e]=function(i,r,o,s){const[a,d,u]=U(this,e,t,i,r,o,s);return a.attributes[d]=u,this.emit("nodeAttributesUpdated",{key:a.key,type:"set",attributes:a.attributes,name:d}),this}}function tt(n,e,t){n.prototype[e]=function(i,r,o,s){const[a,d,u]=U(this,e,t,i,r,o,s);if(typeof u!="function")throw new l(`Graph.${e}: updater should be a function.`);const c=a.attributes,h=u(c[d]);return c[d]=h,this.emit("nodeAttributesUpdated",{key:a.key,type:"set",attributes:a.attributes,name:d}),this}}function it(n,e,t){n.prototype[e]=function(i,r,o){const[s,a]=U(this,e,t,i,r,o);return delete s.attributes[a],this.emit("nodeAttributesUpdated",{key:s.key,type:"remove",attributes:s.attributes,name:a}),this}}function nt(n,e,t){n.prototype[e]=function(i,r,o){const[s,a]=U(this,e,t,i,r,o);if(!$(a))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return s.attributes=a,this.emit("nodeAttributesUpdated",{key:s.key,type:"replace",attributes:s.attributes}),this}}function rt(n,e,t){n.prototype[e]=function(i,r,o){const[s,a]=U(this,e,t,i,r,o);if(!$(a))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return v(s.attributes,a),this.emit("nodeAttributesUpdated",{key:s.key,type:"merge",attributes:s.attributes,data:a}),this}}function ot(n,e,t){n.prototype[e]=function(i,r,o){const[s,a]=U(this,e,t,i,r,o);if(typeof a!="function")throw new l(`Graph.${e}: provided updater is not a function.`);return s.attributes=a(s.attributes),this.emit("nodeAttributesUpdated",{key:s.key,type:"update",attributes:s.attributes}),this}}const st=[{name:n=>`get${n}Attribute`,attacher:Qe},{name:n=>`get${n}Attributes`,attacher:Xe},{name:n=>`has${n}Attribute`,attacher:Ze},{name:n=>`set${n}Attribute`,attacher:et},{name:n=>`update${n}Attribute`,attacher:tt},{name:n=>`remove${n}Attribute`,attacher:it},{name:n=>`replace${n}Attributes`,attacher:nt},{name:n=>`merge${n}Attributes`,attacher:rt},{name:n=>`update${n}Attributes`,attacher:ot}];function at(n){st.forEach(function({name:e,attacher:t}){t(n,e("Node"),ve),t(n,e("Source"),$e),t(n,e("Target"),Je),t(n,e("Opposite"),_e)})}function ut(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new g(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new g(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const s=""+i,a=""+r;if(r=arguments[2],o=x(this,s,a,t),!o)throw new f(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new g(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new f(`Graph.${e}: could not find the "${i}" edge in the graph.`)}return o.attributes[r]}}function dt(n,e,t){n.prototype[e]=function(i){let r;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new g(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>1){if(this.multi)throw new g(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const o=""+i,s=""+arguments[1];if(r=x(this,o,s,t),!r)throw new f(`Graph.${e}: could not find an edge for the given path ("${o}" - "${s}").`)}else{if(t!=="mixed")throw new g(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,r=this._edges.get(i),!r)throw new f(`Graph.${e}: could not find the "${i}" edge in the graph.`)}return r.attributes}}function ht(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new g(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new g(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const s=""+i,a=""+r;if(r=arguments[2],o=x(this,s,a,t),!o)throw new f(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new g(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new f(`Graph.${e}: could not find the "${i}" edge in the graph.`)}return o.attributes.hasOwnProperty(r)}}function ct(n,e,t){n.prototype[e]=function(i,r,o){let s;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new g(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>3){if(this.multi)throw new g(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const a=""+i,d=""+r;if(r=arguments[2],o=arguments[3],s=x(this,a,d,t),!s)throw new f(`Graph.${e}: could not find an edge for the given path ("${a}" - "${d}").`)}else{if(t!=="mixed")throw new g(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,s=this._edges.get(i),!s)throw new f(`Graph.${e}: could not find the "${i}" edge in the graph.`)}return s.attributes[r]=o,this.emit("edgeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:r}),this}}function ft(n,e,t){n.prototype[e]=function(i,r,o){let s;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new g(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>3){if(this.multi)throw new g(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const a=""+i,d=""+r;if(r=arguments[2],o=arguments[3],s=x(this,a,d,t),!s)throw new f(`Graph.${e}: could not find an edge for the given path ("${a}" - "${d}").`)}else{if(t!=="mixed")throw new g(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,s=this._edges.get(i),!s)throw new f(`Graph.${e}: could not find the "${i}" edge in the graph.`)}if(typeof o!="function")throw new l(`Graph.${e}: updater should be a function.`);return s.attributes[r]=o(s.attributes[r]),this.emit("edgeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:r}),this}}function pt(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new g(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new g(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const s=""+i,a=""+r;if(r=arguments[2],o=x(this,s,a,t),!o)throw new f(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new g(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new f(`Graph.${e}: could not find the "${i}" edge in the graph.`)}return delete o.attributes[r],this.emit("edgeAttributesUpdated",{key:o.key,type:"remove",attributes:o.attributes,name:r}),this}}function lt(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new g(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new g(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const s=""+i,a=""+r;if(r=arguments[2],o=x(this,s,a,t),!o)throw new f(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new g(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new f(`Graph.${e}: could not find the "${i}" edge in the graph.`)}if(!$(r))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return o.attributes=r,this.emit("edgeAttributesUpdated",{key:o.key,type:"replace",attributes:o.attributes}),this}}function gt(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new g(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new g(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const s=""+i,a=""+r;if(r=arguments[2],o=x(this,s,a,t),!o)throw new f(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new g(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new f(`Graph.${e}: could not find the "${i}" edge in the graph.`)}if(!$(r))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return v(o.attributes,r),this.emit("edgeAttributesUpdated",{key:o.key,type:"merge",attributes:o.attributes,data:r}),this}}function yt(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new g(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new g(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);const s=""+i,a=""+r;if(r=arguments[2],o=x(this,s,a,t),!o)throw new f(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new g(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new f(`Graph.${e}: could not find the "${i}" edge in the graph.`)}if(typeof r!="function")throw new l(`Graph.${e}: provided updater is not a function.`);return o.attributes=r(o.attributes),this.emit("edgeAttributesUpdated",{key:o.key,type:"update",attributes:o.attributes}),this}}const wt=[{name:n=>`get${n}Attribute`,attacher:ut},{name:n=>`get${n}Attributes`,attacher:dt},{name:n=>`has${n}Attribute`,attacher:ht},{name:n=>`set${n}Attribute`,attacher:ct},{name:n=>`update${n}Attribute`,attacher:ft},{name:n=>`remove${n}Attribute`,attacher:pt},{name:n=>`replace${n}Attributes`,attacher:lt},{name:n=>`merge${n}Attributes`,attacher:gt},{name:n=>`update${n}Attributes`,attacher:yt}];function mt(n){wt.forEach(function({name:e,attacher:t}){t(n,e("Edge"),"mixed"),t(n,e("DirectedEdge"),"directed"),t(n,e("UndirectedEdge"),"undirected")})}const bt=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function vt(n,e,t,i){let r=!1;for(const o in e){if(o===i)continue;const s=e[o];if(r=t(s.key,s.attributes,s.source.key,s.target.key,s.source.attributes,s.target.attributes,s.undirected),n&&r)return s.key}}function $t(n,e,t,i){let r,o,s,a=!1;for(const d in e)if(d!==i){r=e[d];do{if(o=r.source,s=r.target,a=t(r.key,r.attributes,o.key,s.key,o.attributes,s.attributes,r.undirected),n&&a)return r.key;r=r.next}while(r!==void 0)}}function F(n,e){const t=Object.keys(n),i=t.length;let r,o=0;return new A(function(){do if(r)r=r.next;else{if(o>=i)return{done:!0};const a=t[o++];if(a===e){r=void 0;continue}r=n[a]}while(!r);return{done:!1,value:{edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected}}})}function _t(n,e,t,i){const r=e[t];if(!r)return;const o=r.source,s=r.target;if(i(r.key,r.attributes,o.key,s.key,o.attributes,s.attributes,r.undirected)&&n)return r.key}function Et(n,e,t,i){let r=e[t];if(!r)return;let o=!1;do{if(o=i(r.key,r.attributes,r.source.key,r.target.key,r.source.attributes,r.target.attributes,r.undirected),n&&o)return r.key;r=r.next}while(r!==void 0)}function B(n,e){let t=n[e];return t.next!==void 0?new A(function(){if(!t)return{done:!0};const i={edge:t.key,attributes:t.attributes,source:t.source.key,target:t.target.key,sourceAttributes:t.source.attributes,targetAttributes:t.target.attributes,undirected:t.undirected};return t=t.next,{done:!1,value:i}}):A.of({edge:t.key,attributes:t.attributes,source:t.source.key,target:t.target.key,sourceAttributes:t.source.attributes,targetAttributes:t.target.attributes,undirected:t.undirected})}function Gt(n,e){if(n.size===0)return[];if(e==="mixed"||e===n.type)return typeof Array.from=="function"?Array.from(n._edges.keys()):ge(n._edges.keys(),n._edges.size);const t=e==="undirected"?n.undirectedSize:n.directedSize,i=new Array(t),r=e==="undirected",o=n._edges.values();let s=0,a,d;for(;a=o.next(),a.done!==!0;)d=a.value,d.undirected===r&&(i[s++]=d.key);return i}function Ee(n,e,t,i){if(e.size===0)return;const r=t!=="mixed"&&t!==e.type,o=t==="undirected";let s,a,d=!1;const u=e._edges.values();for(;s=u.next(),s.done!==!0;){if(a=s.value,r&&a.undirected!==o)continue;const{key:c,attributes:h,source:p,target:y}=a;if(d=i(c,h,p.key,y.key,p.attributes,y.attributes,a.undirected),n&&d)return c}}function kt(n,e){if(n.size===0)return A.empty();const t=e!=="mixed"&&e!==n.type,i=e==="undirected",r=n._edges.values();return new A(function(){let s,a;for(;;){if(s=r.next(),s.done)return s;if(a=s.value,!(t&&a.undirected!==i))break}return{value:{edge:a.key,attributes:a.attributes,source:a.source.key,target:a.target.key,sourceAttributes:a.source.attributes,targetAttributes:a.target.attributes,undirected:a.undirected},done:!1}})}function Q(n,e,t,i,r,o){const s=e?$t:vt;let a;if(t!=="undirected"&&(i!=="out"&&(a=s(n,r.in,o),n&&a)||i!=="in"&&(a=s(n,r.out,o,i?void 0:r.key),n&&a))||t!=="directed"&&(a=s(n,r.undirected,o),n&&a))return a}function xt(n,e,t,i){const r=[];return Q(!1,n,e,t,i,function(o){r.push(o)}),r}function At(n,e,t){let i=A.empty();return n!=="undirected"&&(e!=="out"&&typeof t.in<"u"&&(i=S(i,F(t.in))),e!=="in"&&typeof t.out<"u"&&(i=S(i,F(t.out,e?void 0:t.key)))),n!=="directed"&&typeof t.undirected<"u"&&(i=S(i,F(t.undirected))),i}function X(n,e,t,i,r,o,s){const a=t?Et:_t;let d;if(e!=="undirected"&&(typeof r.in<"u"&&i!=="out"&&(d=a(n,r.in,o,s),n&&d)||typeof r.out<"u"&&i!=="in"&&(i||r.key!==o)&&(d=a(n,r.out,o,s),n&&d))||e!=="directed"&&typeof r.undirected<"u"&&(d=a(n,r.undirected,o,s),n&&d))return d}function Dt(n,e,t,i,r){const o=[];return X(!1,n,e,t,i,r,function(s){o.push(s)}),o}function Lt(n,e,t,i){let r=A.empty();return n!=="undirected"&&(typeof t.in<"u"&&e!=="out"&&i in t.in&&(r=S(r,B(t.in,i))),typeof t.out<"u"&&e!=="in"&&i in t.out&&(e||t.key!==i)&&(r=S(r,B(t.out,i)))),n!=="directed"&&typeof t.undirected<"u"&&i in t.undirected&&(r=S(r,B(t.undirected,i))),r}function Nt(n,e){const{name:t,type:i,direction:r}=e;n.prototype[t]=function(o,s){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return[];if(!arguments.length)return Gt(this,i);if(arguments.length===1){o=""+o;const a=this._nodes.get(o);if(typeof a>"u")throw new f(`Graph.${t}: could not find the "${o}" node in the graph.`);return xt(this.multi,i==="mixed"?this.type:i,r,a)}if(arguments.length===2){o=""+o,s=""+s;const a=this._nodes.get(o);if(!a)throw new f(`Graph.${t}:  could not find the "${o}" source node in the graph.`);if(!this._nodes.has(s))throw new f(`Graph.${t}:  could not find the "${s}" target node in the graph.`);return Dt(i,this.multi,r,a,s)}throw new l(`Graph.${t}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`)}}function St(n,e){const{name:t,type:i,direction:r}=e,o="forEach"+t[0].toUpperCase()+t.slice(1,-1);n.prototype[o]=function(u,c,h){if(!(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)){if(arguments.length===1)return h=u,Ee(!1,this,i,h);if(arguments.length===2){u=""+u,h=c;const p=this._nodes.get(u);if(typeof p>"u")throw new f(`Graph.${o}: could not find the "${u}" node in the graph.`);return Q(!1,this.multi,i==="mixed"?this.type:i,r,p,h)}if(arguments.length===3){u=""+u,c=""+c;const p=this._nodes.get(u);if(!p)throw new f(`Graph.${o}:  could not find the "${u}" source node in the graph.`);if(!this._nodes.has(c))throw new f(`Graph.${o}:  could not find the "${c}" target node in the graph.`);return X(!1,i,this.multi,r,p,c,h)}throw new l(`Graph.${o}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`)}};const s="map"+t[0].toUpperCase()+t.slice(1);n.prototype[s]=function(){const u=Array.prototype.slice.call(arguments),c=u.pop();let h;if(u.length===0){let p=0;i!=="directed"&&(p+=this.undirectedSize),i!=="undirected"&&(p+=this.directedSize),h=new Array(p);let y=0;u.push((b,E,_,G,L,I,Se)=>{h[y++]=c(b,E,_,G,L,I,Se)})}else h=[],u.push((p,y,b,E,_,G,L)=>{h.push(c(p,y,b,E,_,G,L))});return this[o].apply(this,u),h};const a="filter"+t[0].toUpperCase()+t.slice(1);n.prototype[a]=function(){const u=Array.prototype.slice.call(arguments),c=u.pop(),h=[];return u.push((p,y,b,E,_,G,L)=>{c(p,y,b,E,_,G,L)&&h.push(p)}),this[o].apply(this,u),h};const d="reduce"+t[0].toUpperCase()+t.slice(1);n.prototype[d]=function(){let u=Array.prototype.slice.call(arguments);if(u.length<2||u.length>4)throw new l(`Graph.${d}: invalid number of arguments (expecting 2, 3 or 4 and got ${u.length}).`);if(typeof u[u.length-1]=="function"&&typeof u[u.length-2]!="function")throw new l(`Graph.${d}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`);let c,h;u.length===2?(c=u[0],h=u[1],u=[]):u.length===3?(c=u[1],h=u[2],u=[u[0]]):u.length===4&&(c=u[2],h=u[3],u=[u[0],u[1]]);let p=h;return u.push((y,b,E,_,G,L,I)=>{p=c(p,y,b,E,_,G,L,I)}),this[o].apply(this,u),p}}function Ut(n,e){const{name:t,type:i,direction:r}=e,o="find"+t[0].toUpperCase()+t.slice(1,-1);n.prototype[o]=function(d,u,c){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return!1;if(arguments.length===1)return c=d,Ee(!0,this,i,c);if(arguments.length===2){d=""+d,c=u;const h=this._nodes.get(d);if(typeof h>"u")throw new f(`Graph.${o}: could not find the "${d}" node in the graph.`);return Q(!0,this.multi,i==="mixed"?this.type:i,r,h,c)}if(arguments.length===3){d=""+d,u=""+u;const h=this._nodes.get(d);if(!h)throw new f(`Graph.${o}:  could not find the "${d}" source node in the graph.`);if(!this._nodes.has(u))throw new f(`Graph.${o}:  could not find the "${u}" target node in the graph.`);return X(!0,i,this.multi,r,h,u,c)}throw new l(`Graph.${o}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`)};const s="some"+t[0].toUpperCase()+t.slice(1,-1);n.prototype[s]=function(){const d=Array.prototype.slice.call(arguments),u=d.pop();return d.push((h,p,y,b,E,_,G)=>u(h,p,y,b,E,_,G)),!!this[o].apply(this,d)};const a="every"+t[0].toUpperCase()+t.slice(1,-1);n.prototype[a]=function(){const d=Array.prototype.slice.call(arguments),u=d.pop();return d.push((h,p,y,b,E,_,G)=>!u(h,p,y,b,E,_,G)),!this[o].apply(this,d)}}function Ot(n,e){const{name:t,type:i,direction:r}=e,o=t.slice(0,-1)+"Entries";n.prototype[o]=function(s,a){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return A.empty();if(!arguments.length)return kt(this,i);if(arguments.length===1){s=""+s;const d=this._nodes.get(s);if(!d)throw new f(`Graph.${o}: could not find the "${s}" node in the graph.`);return At(i,r,d)}if(arguments.length===2){s=""+s,a=""+a;const d=this._nodes.get(s);if(!d)throw new f(`Graph.${o}:  could not find the "${s}" source node in the graph.`);if(!this._nodes.has(a))throw new f(`Graph.${o}:  could not find the "${a}" target node in the graph.`);return Lt(i,r,d,a)}throw new l(`Graph.${o}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`)}}function Mt(n){bt.forEach(e=>{Nt(n,e),St(n,e),Ut(n,e),Ot(n,e)})}const Ct=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function K(){this.A=null,this.B=null}K.prototype.wrap=function(n){this.A===null?this.A=n:this.B===null&&(this.B=n)};K.prototype.has=function(n){return this.A!==null&&n in this.A||this.B!==null&&n in this.B};function R(n,e,t,i,r){for(const o in i){const s=i[o],a=s.source,d=s.target,u=a===t?d:a;if(e&&e.has(u.key))continue;const c=r(u.key,u.attributes);if(n&&c)return u.key}}function Z(n,e,t,i,r){if(e!=="mixed"){if(e==="undirected")return R(n,null,i,i.undirected,r);if(typeof t=="string")return R(n,null,i,i[t],r)}const o=new K;let s;if(e!=="undirected"){if(t!=="out"){if(s=R(n,null,i,i.in,r),n&&s)return s;o.wrap(i.in)}if(t!=="in"){if(s=R(n,o,i,i.out,r),n&&s)return s;o.wrap(i.out)}}if(e!=="directed"&&(s=R(n,o,i,i.undirected,r),n&&s))return s}function jt(n,e,t){if(n!=="mixed"){if(n==="undirected")return Object.keys(t.undirected);if(typeof e=="string")return Object.keys(t[e])}const i=[];return Z(!1,n,e,t,function(r){i.push(r)}),i}function z(n,e,t){const i=Object.keys(t),r=i.length;let o=0;return new A(function(){let a=null;do{if(o>=r)return n&&n.wrap(t),{done:!0};const d=t[i[o++]],u=d.source,c=d.target;if(a=u===e?c:u,n&&n.has(a.key)){a=null;continue}}while(a===null);return{done:!1,value:{neighbor:a.key,attributes:a.attributes}}})}function It(n,e,t){if(n!=="mixed"){if(n==="undirected")return z(null,t,t.undirected);if(typeof e=="string")return z(null,t,t[e])}let i=A.empty();const r=new K;return n!=="undirected"&&(e!=="out"&&(i=S(i,z(r,t,t.in))),e!=="in"&&(i=S(i,z(r,t,t.out)))),n!=="directed"&&(i=S(i,z(r,t,t.undirected))),i}function Rt(n,e){const{name:t,type:i,direction:r}=e;n.prototype[t]=function(o){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return[];o=""+o;const s=this._nodes.get(o);if(typeof s>"u")throw new f(`Graph.${t}: could not find the "${o}" node in the graph.`);return jt(i==="mixed"?this.type:i,r,s)}}function zt(n,e){const{name:t,type:i,direction:r}=e,o="forEach"+t[0].toUpperCase()+t.slice(1,-1);n.prototype[o]=function(u,c){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return;u=""+u;const h=this._nodes.get(u);if(typeof h>"u")throw new f(`Graph.${o}: could not find the "${u}" node in the graph.`);Z(!1,i==="mixed"?this.type:i,r,h,c)};const s="map"+t[0].toUpperCase()+t.slice(1);n.prototype[s]=function(u,c){const h=[];return this[o](u,(p,y)=>{h.push(c(p,y))}),h};const a="filter"+t[0].toUpperCase()+t.slice(1);n.prototype[a]=function(u,c){const h=[];return this[o](u,(p,y)=>{c(p,y)&&h.push(p)}),h};const d="reduce"+t[0].toUpperCase()+t.slice(1);n.prototype[d]=function(u,c,h){if(arguments.length<3)throw new l(`Graph.${d}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`);let p=h;return this[o](u,(y,b)=>{p=c(p,y,b)}),p}}function Pt(n,e){const{name:t,type:i,direction:r}=e,o=t[0].toUpperCase()+t.slice(1,-1),s="find"+o;n.prototype[s]=function(u,c){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return;u=""+u;const h=this._nodes.get(u);if(typeof h>"u")throw new f(`Graph.${s}: could not find the "${u}" node in the graph.`);return Z(!0,i==="mixed"?this.type:i,r,h,c)};const a="some"+o;n.prototype[a]=function(u,c){return!!this[s](u,c)};const d="every"+o;n.prototype[d]=function(u,c){return!this[s](u,(p,y)=>!c(p,y))}}function Tt(n,e){const{name:t,type:i,direction:r}=e,o=t.slice(0,-1)+"Entries";n.prototype[o]=function(s){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return A.empty();s=""+s;const a=this._nodes.get(s);if(typeof a>"u")throw new f(`Graph.${o}: could not find the "${s}" node in the graph.`);return It(i==="mixed"?this.type:i,r,a)}}function Wt(n){Ct.forEach(e=>{Rt(n,e),zt(n,e),Pt(n,e),Tt(n,e)})}function P(n,e,t,i,r){const o=i._nodes.values(),s=i.type;let a,d,u,c,h,p,y;for(;a=o.next(),a.done!==!0;){let b=!1;if(d=a.value,s!=="undirected"){c=d.out;for(u in c){h=c[u];do{if(p=h.target,b=!0,y=r(d.key,p.key,d.attributes,p.attributes,h.key,h.attributes,h.undirected),n&&y)return h;h=h.next}while(h)}}if(s!=="directed"){c=d.undirected;for(u in c)if(!(e&&d.key>u)){h=c[u];do{if(p=h.target,p.key!==u&&(p=h.source),b=!0,y=r(d.key,p.key,d.attributes,p.attributes,h.key,h.attributes,h.undirected),n&&y)return h;h=h.next}while(h)}}if(t&&!b&&(y=r(d.key,null,d.attributes,null,null,null,null),n&&y))return null}}function Kt(n,e){const t={key:n};return ye(e.attributes)||(t.attributes=v({},e.attributes)),t}function Ft(n,e,t){const i={key:e,source:t.source.key,target:t.target.key};return ye(t.attributes)||(i.attributes=v({},t.attributes)),n==="mixed"&&t.undirected&&(i.undirected=!0),i}function Bt(n){if(!$(n))throw new l('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in n))throw new l("Graph.import: serialized node is missing its key.");if("attributes"in n&&(!$(n.attributes)||n.attributes===null))throw new l("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function Yt(n){if(!$(n))throw new l('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in n))throw new l("Graph.import: serialized edge is missing its source.");if(!("target"in n))throw new l("Graph.import: serialized edge is missing its target.");if("attributes"in n&&(!$(n.attributes)||n.attributes===null))throw new l("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in n&&typeof n.undirected!="boolean")throw new l("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}const Ht=qe(),Vt=new Set(["directed","undirected","mixed"]),ne=new Set(["domain","_events","_eventsCount","_maxListeners"]),qt=[{name:n=>`${n}Edge`,generateKey:!0},{name:n=>`${n}DirectedEdge`,generateKey:!0,type:"directed"},{name:n=>`${n}UndirectedEdge`,generateKey:!0,type:"undirected"},{name:n=>`${n}EdgeWithKey`},{name:n=>`${n}DirectedEdgeWithKey`,type:"directed"},{name:n=>`${n}UndirectedEdgeWithKey`,type:"undirected"}],Jt={allowSelfLoops:!0,multi:!1,type:"mixed"};function Qt(n,e,t){if(t&&!$(t))throw new l(`Graph.addNode: invalid attributes. Expecting an object but got "${t}"`);if(e=""+e,t=t||{},n._nodes.has(e))throw new g(`Graph.addNode: the "${e}" node already exist in the graph.`);const i=new n.NodeDataClass(e,t);return n._nodes.set(e,i),n.emit("nodeAdded",{key:e,attributes:t}),i}function re(n,e,t){const i=new n.NodeDataClass(e,t);return n._nodes.set(e,i),n.emit("nodeAdded",{key:e,attributes:t}),i}function Ge(n,e,t,i,r,o,s,a){if(!i&&n.type==="undirected")throw new g(`Graph.${e}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`);if(i&&n.type==="directed")throw new g(`Graph.${e}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`);if(a&&!$(a))throw new l(`Graph.${e}: invalid attributes. Expecting an object but got "${a}"`);if(o=""+o,s=""+s,a=a||{},!n.allowSelfLoops&&o===s)throw new g(`Graph.${e}: source & target are the same ("${o}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);const d=n._nodes.get(o),u=n._nodes.get(s);if(!d)throw new f(`Graph.${e}: source node "${o}" not found.`);if(!u)throw new f(`Graph.${e}: target node "${s}" not found.`);const c={key:null,undirected:i,source:o,target:s,attributes:a};if(t)r=n._edgeKeyGenerator();else if(r=""+r,n._edges.has(r))throw new g(`Graph.${e}: the "${r}" edge already exists in the graph.`);if(!n.multi&&(i?typeof d.undirected[s]<"u":typeof d.out[s]<"u"))throw new g(`Graph.${e}: an edge linking "${o}" to "${s}" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`);const h=new C(i,r,d,u,a);n._edges.set(r,h);const p=o===s;return i?(d.undirectedDegree++,u.undirectedDegree++,p&&(d.undirectedLoops++,n._undirectedSelfLoopCount++)):(d.outDegree++,u.inDegree++,p&&(d.directedLoops++,n._directedSelfLoopCount++)),n.multi?h.attachMulti():h.attach(),i?n._undirectedSize++:n._directedSize++,c.key=r,n.emit("edgeAdded",c),r}function Xt(n,e,t,i,r,o,s,a,d){if(!i&&n.type==="undirected")throw new g(`Graph.${e}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`);if(i&&n.type==="directed")throw new g(`Graph.${e}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`);if(a){if(d){if(typeof a!="function")throw new l(`Graph.${e}: invalid updater function. Expecting a function but got "${a}"`)}else if(!$(a))throw new l(`Graph.${e}: invalid attributes. Expecting an object but got "${a}"`)}o=""+o,s=""+s;let u;if(d&&(u=a,a=void 0),!n.allowSelfLoops&&o===s)throw new g(`Graph.${e}: source & target are the same ("${o}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);let c=n._nodes.get(o),h=n._nodes.get(s),p,y;if(!t&&(p=n._edges.get(r),p)){if((p.source.key!==o||p.target.key!==s)&&(!i||p.source.key!==s||p.target.key!==o))throw new g(`Graph.${e}: inconsistency detected when attempting to merge the "${r}" edge with "${o}" source & "${s}" target vs. ("${p.source.key}", "${p.target.key}").`);y=p}if(!y&&!n.multi&&c&&(y=i?c.undirected[s]:c.out[s]),y){const L=[y.key,!1,!1,!1];if(d?!u:!a)return L;if(d){const I=y.attributes;y.attributes=u(I),n.emit("edgeAttributesUpdated",{type:"replace",key:y.key,attributes:y.attributes})}else v(y.attributes,a),n.emit("edgeAttributesUpdated",{type:"merge",key:y.key,attributes:y.attributes,data:a});return L}a=a||{},d&&u&&(a=u(a));const b={key:null,undirected:i,source:o,target:s,attributes:a};if(t)r=n._edgeKeyGenerator();else if(r=""+r,n._edges.has(r))throw new g(`Graph.${e}: the "${r}" edge already exists in the graph.`);let E=!1,_=!1;c||(c=re(n,o,{}),E=!0,o===s&&(h=c,_=!0)),h||(h=re(n,s,{}),_=!0),p=new C(i,r,c,h,a),n._edges.set(r,p);const G=o===s;return i?(c.undirectedDegree++,h.undirectedDegree++,G&&(c.undirectedLoops++,n._undirectedSelfLoopCount++)):(c.outDegree++,h.inDegree++,G&&(c.directedLoops++,n._directedSelfLoopCount++)),n.multi?p.attachMulti():p.attach(),i?n._undirectedSize++:n._directedSize++,b.key=r,n.emit("edgeAdded",b),[r,!0,E,_]}function O(n,e){n._edges.delete(e.key);const{source:t,target:i,attributes:r}=e,o=e.undirected,s=t===i;o?(t.undirectedDegree--,i.undirectedDegree--,s&&(t.undirectedLoops--,n._undirectedSelfLoopCount--)):(t.outDegree--,i.inDegree--,s&&(t.directedLoops--,n._directedSelfLoopCount--)),n.multi?e.detachMulti():e.detach(),o?n._undirectedSize--:n._directedSize--,n.emit("edgeDropped",{key:e.key,attributes:r,source:t.key,target:i.key,undirected:o})}class m extends Re.EventEmitter{constructor(e){if(super(),e=v({},Jt,e),typeof e.multi!="boolean")throw new l(`Graph.constructor: invalid 'multi' option. Expecting a boolean but got "${e.multi}".`);if(!Vt.has(e.type))throw new l(`Graph.constructor: invalid 'type' option. Should be one of "mixed", "directed" or "undirected" but got "${e.type}".`);if(typeof e.allowSelfLoops!="boolean")throw new l(`Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got "${e.allowSelfLoops}".`);const t=e.type==="mixed"?we:e.type==="directed"?me:be;k(this,"NodeDataClass",t);const i="geid_"+Ht()+"_";let r=0;const o=()=>{let s;do s=i+r++;while(this._edges.has(s));return s};k(this,"_attributes",{}),k(this,"_nodes",new Map),k(this,"_edges",new Map),k(this,"_directedSize",0),k(this,"_undirectedSize",0),k(this,"_directedSelfLoopCount",0),k(this,"_undirectedSelfLoopCount",0),k(this,"_edgeKeyGenerator",o),k(this,"_options",e),ne.forEach(s=>k(this,s,this[s])),D(this,"order",()=>this._nodes.size),D(this,"size",()=>this._edges.size),D(this,"directedSize",()=>this._directedSize),D(this,"undirectedSize",()=>this._undirectedSize),D(this,"selfLoopCount",()=>this._directedSelfLoopCount+this._undirectedSelfLoopCount),D(this,"directedSelfLoopCount",()=>this._directedSelfLoopCount),D(this,"undirectedSelfLoopCount",()=>this._undirectedSelfLoopCount),D(this,"multi",this._options.multi),D(this,"type",this._options.type),D(this,"allowSelfLoops",this._options.allowSelfLoops),D(this,"implementation",()=>"graphology")}_resetInstanceCounters(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0}hasNode(e){return this._nodes.has(""+e)}hasDirectedEdge(e,t){if(this.type==="undirected")return!1;if(arguments.length===1){const i=""+e,r=this._edges.get(i);return!!r&&!r.undirected}else if(arguments.length===2){e=""+e,t=""+t;const i=this._nodes.get(e);return i?i.out.hasOwnProperty(t):!1}throw new l(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}hasUndirectedEdge(e,t){if(this.type==="directed")return!1;if(arguments.length===1){const i=""+e,r=this._edges.get(i);return!!r&&r.undirected}else if(arguments.length===2){e=""+e,t=""+t;const i=this._nodes.get(e);return i?i.undirected.hasOwnProperty(t):!1}throw new l(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}hasEdge(e,t){if(arguments.length===1){const i=""+e;return this._edges.has(i)}else if(arguments.length===2){e=""+e,t=""+t;const i=this._nodes.get(e);return i?typeof i.out<"u"&&i.out.hasOwnProperty(t)||typeof i.undirected<"u"&&i.undirected.hasOwnProperty(t):!1}throw new l(`Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}directedEdge(e,t){if(this.type==="undirected")return;if(e=""+e,t=""+t,this.multi)throw new g("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");const i=this._nodes.get(e);if(!i)throw new f(`Graph.directedEdge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new f(`Graph.directedEdge: could not find the "${t}" target node in the graph.`);const r=i.out&&i.out[t]||void 0;if(r)return r.key}undirectedEdge(e,t){if(this.type==="directed")return;if(e=""+e,t=""+t,this.multi)throw new g("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");const i=this._nodes.get(e);if(!i)throw new f(`Graph.undirectedEdge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new f(`Graph.undirectedEdge: could not find the "${t}" target node in the graph.`);const r=i.undirected&&i.undirected[t]||void 0;if(r)return r.key}edge(e,t){if(this.multi)throw new g("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");e=""+e,t=""+t;const i=this._nodes.get(e);if(!i)throw new f(`Graph.edge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new f(`Graph.edge: could not find the "${t}" target node in the graph.`);const r=i.out&&i.out[t]||i.undirected&&i.undirected[t]||void 0;if(r)return r.key}areDirectedNeighbors(e,t){e=""+e,t=""+t;const i=this._nodes.get(e);if(!i)throw new f(`Graph.areDirectedNeighbors: could not find the "${e}" node in the graph.`);return this.type==="undirected"?!1:t in i.in||t in i.out}areOutNeighbors(e,t){e=""+e,t=""+t;const i=this._nodes.get(e);if(!i)throw new f(`Graph.areOutNeighbors: could not find the "${e}" node in the graph.`);return this.type==="undirected"?!1:t in i.out}areInNeighbors(e,t){e=""+e,t=""+t;const i=this._nodes.get(e);if(!i)throw new f(`Graph.areInNeighbors: could not find the "${e}" node in the graph.`);return this.type==="undirected"?!1:t in i.in}areUndirectedNeighbors(e,t){e=""+e,t=""+t;const i=this._nodes.get(e);if(!i)throw new f(`Graph.areUndirectedNeighbors: could not find the "${e}" node in the graph.`);return this.type==="directed"?!1:t in i.undirected}areNeighbors(e,t){e=""+e,t=""+t;const i=this._nodes.get(e);if(!i)throw new f(`Graph.areNeighbors: could not find the "${e}" node in the graph.`);return this.type!=="undirected"&&(t in i.in||t in i.out)||this.type!=="directed"&&t in i.undirected}areInboundNeighbors(e,t){e=""+e,t=""+t;const i=this._nodes.get(e);if(!i)throw new f(`Graph.areInboundNeighbors: could not find the "${e}" node in the graph.`);return this.type!=="undirected"&&t in i.in||this.type!=="directed"&&t in i.undirected}areOutboundNeighbors(e,t){e=""+e,t=""+t;const i=this._nodes.get(e);if(!i)throw new f(`Graph.areOutboundNeighbors: could not find the "${e}" node in the graph.`);return this.type!=="undirected"&&t in i.out||this.type!=="directed"&&t in i.undirected}inDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.inDegree: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree}outDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.outDegree: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.outDegree}directedDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.directedDegree: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree+t.outDegree}undirectedDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.undirectedDegree: could not find the "${e}" node in the graph.`);return this.type==="directed"?0:t.undirectedDegree}inboundDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.inboundDegree: could not find the "${e}" node in the graph.`);let i=0;return this.type!=="directed"&&(i+=t.undirectedDegree),this.type!=="undirected"&&(i+=t.inDegree),i}outboundDegree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.outboundDegree: could not find the "${e}" node in the graph.`);let i=0;return this.type!=="directed"&&(i+=t.undirectedDegree),this.type!=="undirected"&&(i+=t.outDegree),i}degree(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.degree: could not find the "${e}" node in the graph.`);let i=0;return this.type!=="directed"&&(i+=t.undirectedDegree),this.type!=="undirected"&&(i+=t.inDegree+t.outDegree),i}inDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.inDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree-t.directedLoops}outDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.outDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.outDegree-t.directedLoops}directedDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.directedDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree+t.outDegree-t.directedLoops*2}undirectedDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.undirectedDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="directed"?0:t.undirectedDegree-t.undirectedLoops*2}inboundDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.inboundDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let i=0,r=0;return this.type!=="directed"&&(i+=t.undirectedDegree,r+=t.undirectedLoops*2),this.type!=="undirected"&&(i+=t.inDegree,r+=t.directedLoops),i-r}outboundDegreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.outboundDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let i=0,r=0;return this.type!=="directed"&&(i+=t.undirectedDegree,r+=t.undirectedLoops*2),this.type!=="undirected"&&(i+=t.outDegree,r+=t.directedLoops),i-r}degreeWithoutSelfLoops(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.degreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let i=0,r=0;return this.type!=="directed"&&(i+=t.undirectedDegree,r+=t.undirectedLoops*2),this.type!=="undirected"&&(i+=t.inDegree+t.outDegree,r+=t.directedLoops*2),i-r}source(e){e=""+e;const t=this._edges.get(e);if(!t)throw new f(`Graph.source: could not find the "${e}" edge in the graph.`);return t.source.key}target(e){e=""+e;const t=this._edges.get(e);if(!t)throw new f(`Graph.target: could not find the "${e}" edge in the graph.`);return t.target.key}extremities(e){e=""+e;const t=this._edges.get(e);if(!t)throw new f(`Graph.extremities: could not find the "${e}" edge in the graph.`);return[t.source.key,t.target.key]}opposite(e,t){e=""+e,t=""+t;const i=this._edges.get(t);if(!i)throw new f(`Graph.opposite: could not find the "${t}" edge in the graph.`);const r=i.source.key,o=i.target.key;if(e===r)return o;if(e===o)return r;throw new f(`Graph.opposite: the "${e}" node is not attached to the "${t}" edge (${r}, ${o}).`)}hasExtremity(e,t){e=""+e,t=""+t;const i=this._edges.get(e);if(!i)throw new f(`Graph.hasExtremity: could not find the "${e}" edge in the graph.`);return i.source.key===t||i.target.key===t}isUndirected(e){e=""+e;const t=this._edges.get(e);if(!t)throw new f(`Graph.isUndirected: could not find the "${e}" edge in the graph.`);return t.undirected}isDirected(e){e=""+e;const t=this._edges.get(e);if(!t)throw new f(`Graph.isDirected: could not find the "${e}" edge in the graph.`);return!t.undirected}isSelfLoop(e){e=""+e;const t=this._edges.get(e);if(!t)throw new f(`Graph.isSelfLoop: could not find the "${e}" edge in the graph.`);return t.source===t.target}addNode(e,t){return Qt(this,e,t).key}mergeNode(e,t){if(t&&!$(t))throw new l(`Graph.mergeNode: invalid attributes. Expecting an object but got "${t}"`);e=""+e,t=t||{};let i=this._nodes.get(e);return i?(t&&(v(i.attributes,t),this.emit("nodeAttributesUpdated",{type:"merge",key:e,attributes:i.attributes,data:t})),[e,!1]):(i=new this.NodeDataClass(e,t),this._nodes.set(e,i),this.emit("nodeAdded",{key:e,attributes:t}),[e,!0])}updateNode(e,t){if(t&&typeof t!="function")throw new l(`Graph.updateNode: invalid updater function. Expecting a function but got "${t}"`);e=""+e;let i=this._nodes.get(e);if(i){if(t){const o=i.attributes;i.attributes=t(o),this.emit("nodeAttributesUpdated",{type:"replace",key:e,attributes:i.attributes})}return[e,!1]}const r=t?t({}):{};return i=new this.NodeDataClass(e,r),this._nodes.set(e,i),this.emit("nodeAdded",{key:e,attributes:r}),[e,!0]}dropNode(e){e=""+e;const t=this._nodes.get(e);if(!t)throw new f(`Graph.dropNode: could not find the "${e}" node in the graph.`);let i;if(this.type!=="undirected"){for(const r in t.out){i=t.out[r];do O(this,i),i=i.next;while(i)}for(const r in t.in){i=t.in[r];do O(this,i),i=i.next;while(i)}}if(this.type!=="directed")for(const r in t.undirected){i=t.undirected[r];do O(this,i),i=i.next;while(i)}this._nodes.delete(e),this.emit("nodeDropped",{key:e,attributes:t.attributes})}dropEdge(e){let t;if(arguments.length>1){const i=""+arguments[0],r=""+arguments[1];if(t=x(this,i,r,this.type),!t)throw new f(`Graph.dropEdge: could not find the "${i}" -> "${r}" edge in the graph.`)}else if(e=""+e,t=this._edges.get(e),!t)throw new f(`Graph.dropEdge: could not find the "${e}" edge in the graph.`);return O(this,t),this}dropDirectedEdge(e,t){if(arguments.length<2)throw new g("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new g("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");e=""+e,t=""+t;const i=x(this,e,t,"directed");if(!i)throw new f(`Graph.dropDirectedEdge: could not find a "${e}" -> "${t}" edge in the graph.`);return O(this,i),this}dropUndirectedEdge(e,t){if(arguments.length<2)throw new g("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new g("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");const i=x(this,e,t,"undirected");if(!i)throw new f(`Graph.dropUndirectedEdge: could not find a "${e}" -> "${t}" edge in the graph.`);return O(this,i),this}clear(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")}clearEdges(){const e=this._nodes.values();let t;for(;t=e.next(),t.done!==!0;)t.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")}getAttribute(e){return this._attributes[e]}getAttributes(){return this._attributes}hasAttribute(e){return this._attributes.hasOwnProperty(e)}setAttribute(e,t){return this._attributes[e]=t,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this}updateAttribute(e,t){if(typeof t!="function")throw new l("Graph.updateAttribute: updater should be a function.");const i=this._attributes[e];return this._attributes[e]=t(i),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this}removeAttribute(e){return delete this._attributes[e],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:e}),this}replaceAttributes(e){if(!$(e))throw new l("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=e,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this}mergeAttributes(e){if(!$(e))throw new l("Graph.mergeAttributes: provided attributes are not a plain object.");return v(this._attributes,e),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:e}),this}updateAttributes(e){if(typeof e!="function")throw new l("Graph.updateAttributes: provided updater is not a function.");return this._attributes=e(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this}updateEachNodeAttributes(e,t){if(typeof e!="function")throw new l("Graph.updateEachNodeAttributes: expecting an updater function.");if(t&&!ie(t))throw new l("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");const i=this._nodes.values();let r,o;for(;r=i.next(),r.done!==!0;)o=r.value,o.attributes=e(o.key,o.attributes);this.emit("eachNodeAttributesUpdated",{hints:t||null})}updateEachEdgeAttributes(e,t){if(typeof e!="function")throw new l("Graph.updateEachEdgeAttributes: expecting an updater function.");if(t&&!ie(t))throw new l("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");const i=this._edges.values();let r,o,s,a;for(;r=i.next(),r.done!==!0;)o=r.value,s=o.source,a=o.target,o.attributes=e(o.key,o.attributes,s.key,a.key,s.attributes,a.attributes,o.undirected);this.emit("eachEdgeAttributesUpdated",{hints:t||null})}forEachAdjacencyEntry(e){if(typeof e!="function")throw new l("Graph.forEachAdjacencyEntry: expecting a callback.");P(!1,!1,!1,this,e)}forEachAdjacencyEntryWithOrphans(e){if(typeof e!="function")throw new l("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");P(!1,!1,!0,this,e)}forEachAssymetricAdjacencyEntry(e){if(typeof e!="function")throw new l("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");P(!1,!0,!1,this,e)}forEachAssymetricAdjacencyEntryWithOrphans(e){if(typeof e!="function")throw new l("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");P(!1,!0,!0,this,e)}nodes(){return typeof Array.from=="function"?Array.from(this._nodes.keys()):ge(this._nodes.keys(),this._nodes.size)}forEachNode(e){if(typeof e!="function")throw new l("Graph.forEachNode: expecting a callback.");const t=this._nodes.values();let i,r;for(;i=t.next(),i.done!==!0;)r=i.value,e(r.key,r.attributes)}findNode(e){if(typeof e!="function")throw new l("Graph.findNode: expecting a callback.");const t=this._nodes.values();let i,r;for(;i=t.next(),i.done!==!0;)if(r=i.value,e(r.key,r.attributes))return r.key}mapNodes(e){if(typeof e!="function")throw new l("Graph.mapNode: expecting a callback.");const t=this._nodes.values();let i,r;const o=new Array(this.order);let s=0;for(;i=t.next(),i.done!==!0;)r=i.value,o[s++]=e(r.key,r.attributes);return o}someNode(e){if(typeof e!="function")throw new l("Graph.someNode: expecting a callback.");const t=this._nodes.values();let i,r;for(;i=t.next(),i.done!==!0;)if(r=i.value,e(r.key,r.attributes))return!0;return!1}everyNode(e){if(typeof e!="function")throw new l("Graph.everyNode: expecting a callback.");const t=this._nodes.values();let i,r;for(;i=t.next(),i.done!==!0;)if(r=i.value,!e(r.key,r.attributes))return!1;return!0}filterNodes(e){if(typeof e!="function")throw new l("Graph.filterNodes: expecting a callback.");const t=this._nodes.values();let i,r;const o=[];for(;i=t.next(),i.done!==!0;)r=i.value,e(r.key,r.attributes)&&o.push(r.key);return o}reduceNodes(e,t){if(typeof e!="function")throw new l("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new l("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");let i=t;const r=this._nodes.values();let o,s;for(;o=r.next(),o.done!==!0;)s=o.value,i=e(i,s.key,s.attributes);return i}nodeEntries(){const e=this._nodes.values();return new A(()=>{const t=e.next();if(t.done)return t;const i=t.value;return{value:{node:i.key,attributes:i.attributes},done:!1}})}export(){const e=new Array(this._nodes.size);let t=0;this._nodes.forEach((r,o)=>{e[t++]=Kt(o,r)});const i=new Array(this._edges.size);return t=0,this._edges.forEach((r,o)=>{i[t++]=Ft(this.type,o,r)}),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:e,edges:i}}import(e,t=!1){if(e instanceof m)return e.forEachNode((d,u)=>{t?this.mergeNode(d,u):this.addNode(d,u)}),e.forEachEdge((d,u,c,h,p,y,b)=>{t?b?this.mergeUndirectedEdgeWithKey(d,c,h,u):this.mergeDirectedEdgeWithKey(d,c,h,u):b?this.addUndirectedEdgeWithKey(d,c,h,u):this.addDirectedEdgeWithKey(d,c,h,u)}),this;if(!$(e))throw new l("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(e.attributes){if(!$(e.attributes))throw new l("Graph.import: invalid attributes. Expecting a plain object.");t?this.mergeAttributes(e.attributes):this.replaceAttributes(e.attributes)}let i,r,o,s,a;if(e.nodes){if(o=e.nodes,!Array.isArray(o))throw new l("Graph.import: invalid nodes. Expecting an array.");for(i=0,r=o.length;i<r;i++){s=o[i],Bt(s);const{key:d,attributes:u}=s;t?this.mergeNode(d,u):this.addNode(d,u)}}if(e.edges){let d=!1;if(this.type==="undirected"&&(d=!0),o=e.edges,!Array.isArray(o))throw new l("Graph.import: invalid edges. Expecting an array.");for(i=0,r=o.length;i<r;i++){a=o[i],Yt(a);const{source:u,target:c,attributes:h,undirected:p=d}=a;let y;"key"in a?(y=t?p?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:p?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey,y.call(this,a.key,u,c,h)):(y=t?p?this.mergeUndirectedEdge:this.mergeDirectedEdge:p?this.addUndirectedEdge:this.addDirectedEdge,y.call(this,u,c,h))}}return this}nullCopy(e){const t=new m(v({},this._options,e));return t.replaceAttributes(v({},this.getAttributes())),t}emptyCopy(e){const t=this.nullCopy(e);return this._nodes.forEach((i,r)=>{const o=v({},i.attributes);i=new t.NodeDataClass(r,o),t._nodes.set(r,i)}),t}copy(e){if(e=e||{},typeof e.type=="string"&&e.type!==this.type&&e.type!=="mixed")throw new g(`Graph.copy: cannot create an incompatible copy from "${this.type}" type to "${e.type}" because this would mean losing information about the current graph.`);if(typeof e.multi=="boolean"&&e.multi!==this.multi&&e.multi!==!0)throw new g("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if(typeof e.allowSelfLoops=="boolean"&&e.allowSelfLoops!==this.allowSelfLoops&&e.allowSelfLoops!==!0)throw new g("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");const t=this.emptyCopy(e),i=this._edges.values();let r,o;for(;r=i.next(),r.done!==!0;)o=r.value,Ge(t,"copy",!1,o.undirected,o.key,o.source.key,o.target.key,v({},o.attributes));return t}toJSON(){return this.export()}toString(){return"[object Graph]"}inspect(){const e={};this._nodes.forEach((o,s)=>{e[s]=o.attributes});const t={},i={};this._edges.forEach((o,s)=>{const a=o.undirected?"--":"->";let d="",u=o.source.key,c=o.target.key,h;o.undirected&&u>c&&(h=u,u=c,c=h);const p=`(${u})${a}(${c})`;s.startsWith("geid_")?this.multi&&(typeof i[p]>"u"?i[p]=0:i[p]++,d+=`${i[p]}. `):d+=`[${s}]: `,d+=p,t[d]=o.attributes});const r={};for(const o in this)this.hasOwnProperty(o)&&!ne.has(o)&&typeof this[o]!="function"&&typeof o!="symbol"&&(r[o]=this[o]);return r.attributes=this._attributes,r.nodes=e,r.edges=t,k(r,"constructor",this.constructor),r}}typeof Symbol<"u"&&(m.prototype[Symbol.for("nodejs.util.inspect.custom")]=m.prototype.inspect);qt.forEach(n=>{["add","merge","update"].forEach(e=>{const t=n.name(e),i=e==="add"?Ge:Xt;n.generateKey?m.prototype[t]=function(r,o,s){return i(this,t,!0,(n.type||this.type)==="undirected",null,r,o,s,e==="update")}:m.prototype[t]=function(r,o,s,a){return i(this,t,!1,(n.type||this.type)==="undirected",r,o,s,a,e==="update")}})});at(m);mt(m);Mt(m);Wt(m);class ke extends m{constructor(e){const t=v({type:"directed"},e);if("multi"in t&&t.multi!==!1)throw new l("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if(t.type!=="directed")throw new l('DirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}}class xe extends m{constructor(e){const t=v({type:"undirected"},e);if("multi"in t&&t.multi!==!1)throw new l("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if(t.type!=="undirected")throw new l('UndirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}}class Ae extends m{constructor(e){const t=v({multi:!0},e);if("multi"in t&&t.multi!==!0)throw new l("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");super(t)}}class De extends m{constructor(e){const t=v({type:"directed",multi:!0},e);if("multi"in t&&t.multi!==!0)throw new l("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if(t.type!=="directed")throw new l('MultiDirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}}class Le extends m{constructor(e){const t=v({type:"undirected",multi:!0},e);if("multi"in t&&t.multi!==!0)throw new l("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if(t.type!=="undirected")throw new l('MultiUndirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}}function j(n){n.from=function(e,t){const i=v({},e.options,t),r=new n(i);return r.import(e),r}}j(m);j(ke);j(xe);j(Ae);j(De);j(Le);m.Graph=m;m.DirectedGraph=ke;m.UndirectedGraph=xe;m.MultiGraph=Ae;m.MultiDirectedGraph=De;m.MultiUndirectedGraph=Le;m.InvalidArgumentsGraphError=l;m.NotFoundGraphError=f;m.UsageGraphError=g;function Zt(n){return!n||typeof n!="object"||typeof n=="function"||Array.isArray(n)||n instanceof Set||n instanceof Map||n instanceof RegExp||n instanceof Date}function Ne(n,e){n=n||{};var t={};for(var i in e){var r=n[i],o=e[i];if(!Zt(o)){t[i]=Ne(r,o);continue}r===void 0?t[i]=o:t[i]=r}return t}var ti=Ne,ii=function(e){return e!==null&&typeof e=="object"&&typeof e.addUndirectedEdgeWithKey=="function"&&typeof e.dropNode=="function"&&typeof e.multi=="boolean"};export{m as G,ti as d,ii as i};
