import{M as u}from"./relation-graph-9cfe1c0d.js";import{d as v,r as _,o as R,a as N,c as k,e as l,w as d,i as m,b as t,u as w,p as S,j as C}from"./index-5e8eec4e.js";import{_ as B}from"./_plugin-vue_export-helper-c27b6911.js";const I=i=>(S("data-v-9ca1081e"),i=i(),C(),i),T={style:{height:"calc(100vh - 100px)"}},A=I(()=>t("div",{style:{height:"calc(100vh - 100px)","border-left":"#efefef solid 1px","border-right":"#efefef solid 1px",padding:"15px","font-size":"14px","line-height":"25px"}},[t("ul",null,[t("li",null,"The relationships in the original data are all top-down. Only in this way can the bidirectional tree expand from the root node up and down at the same time."),t("li",null,"If you want to display the arrows above the root node pointing upwards and the arrows below the root node pointing downwards, you can set the properties of all lines above:"),t("ul",null,[t("li",null,"showStartArrow=true"),t("li",null,"showEndArrow=false")]),t("li",null,"This makes the lines above appear to be displayed in reverse."),t("li",null,"Finally, you can set the relationship from top to bottom through from and to to meet the requirements of bidirectional tree data. But you can also use showStartArrow=true;showEndArrow=false to make the arrows above point upwards.")])],-1)),M={style:{height:"calc(100vh - 100px)"}},j=v({__name:"bothway-tree-faq",setup(i){const s=_(null),c=_(null),g={debug:!1,layouts:[{layoutName:"tree",from:"top",min_per_width:70,max_per_width:200,min_per_height:200,max_per_height:400}],allowShowMiniToolBar:!1,defaultNodeShape:1,defaultLineShape:4,defaultNodeBorderWidth:0,defaultNodeColor:"rgba(0, 206, 209, 1)",defaultNodeWidth:30,defaultNodeHeight:100,defaultJunctionPoint:"tb"},x={debug:!1,layouts:[{layoutName:"tree",from:"top",min_per_width:70,max_per_width:200,min_per_height:200,max_per_height:400}],allowShowMiniToolBar:!1,defaultNodeShape:1,defaultLineShape:4,defaultNodeBorderWidth:0,defaultNodeColor:"rgba(0, 206, 209, 1)",defaultNodeWidth:30,defaultNodeHeight:100,defaultJunctionPoint:"tb"};R(()=>{b()});const b=async()=>{const o=s.value;await h(o,"graph1");const a=c.value;await h(a,"graph2")},h=async(o,a)=>{let e,n,r;a==="graph2"&&(e=!0,n=!1,r="#ff0000"),o&&await y(o,{rootId:"a",nodes:[{id:"a",text:"Root Node a"},{id:"R-b",text:"R-b"},{id:"R-c",text:"R-c",expandHolderPosition:"top"},{id:"R-c-1",text:"R-c-1"},{id:"R-c-2",text:"R-c-2"},{id:"R-d",text:"R-d"},{id:"b",text:"b"},{id:"c",text:"c",expandHolderPosition:"bottom"},{id:"c1",text:"c1"},{id:"c2",text:"c2"},{id:"c3",text:"c3"},{id:"d",text:"d"},{id:"e",text:"e"}],lines:[{from:"R-b",to:"a",showStartArrow:e,showEndArrow:n,color:r},{from:"R-c",to:"a",showStartArrow:e,showEndArrow:n,color:r},{from:"R-c-1",to:"R-c",showStartArrow:e,showEndArrow:n,color:r},{from:"R-c-2",to:"R-c",showStartArrow:e,showEndArrow:n,color:r},{from:"R-d",to:"a",showStartArrow:e,showEndArrow:n,color:r},{from:"a",to:"b"},{from:"a",to:"c"},{from:"c",to:"c1"},{from:"c",to:"c2"},{from:"c",to:"c3"},{from:"a",to:"d"},{from:"a",to:"e"}]})},y=async(o,a)=>{const e=o.getInstance();await e.setJsonData(a),await e.moveToCenter(),await e.zoomToFit(),await e.focusNodeById("a")},p=(o,a)=>{console.log("onNodeClick:",o)},f=(o,a,e)=>{console.log("onLineClick:",o)};return(o,a)=>{const e=m("el-col"),n=m("el-row");return N(),k("div",null,[l(n,null,{default:d(()=>[l(e,{span:9},{default:d(()=>[t("div",T,[l(w(u),{ref_key:"graphRef1",ref:s,options:g,"on-node-click":p,"on-line-click":f},null,512)])]),_:1}),l(e,{span:6},{default:d(()=>[A]),_:1}),l(e,{span:9},{default:d(()=>[t("div",M,[l(w(u),{ref_key:"graphRef2",ref:c,options:x,"on-node-click":p,"on-line-click":f},null,512)])]),_:1})]),_:1})])}}});const L=B(j,[["__scopeId","data-v-9ca1081e"]]);export{L as default};
