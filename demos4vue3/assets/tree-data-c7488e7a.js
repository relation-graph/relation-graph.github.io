import{k as _}from"./relation-graph-4b768e87.js";import{d as u,r as d,o as f,a as n,c as l,l as b,e as x,w as g,u as m,m as y,p as v,j as w,b as i,f as r}from"./index-ee818b67.js";import{_ as N}from"./_plugin-vue_export-helper-c27b6911.js";const D=e=>(v("data-v-636108b5"),e=e(),w(),e),I={style:{}},S={style:{height:"calc(100vh - 60px)"}},k=D(()=>i("div",{class:"c-my-panel"},[i("div",{class:"c-option-name",style:{"line-height":"25px",padding:"0px",width:"300px"}},[r(" In this example, a typical hierarchical data structure is passed to setJsonData, and the graph will automatically recognize it (by the children property to identify child nodes) and flatten it for display. This is done just to facilitate the display of some tree graphs. "),i("br"),r(" Using the tree data structure directly has obvious deficiencies: only the default line style can be set globally, specific link properties cannot be set, and line styles cannot be defined in detail. ")])],-1)),C=u({__name:"tree-data",setup(e){const o=d(!0),s=d(),c={debug:!1,layouts:[{label:"Center",layoutName:"tree",layoutClassName:"seeks-layout-center",defaultJunctionPoint:"border",defaultNodeShape:0,defaultLineShape:1,from:"left",min_per_width:"200",max_per_width:"500",min_per_height:"40",max_per_height:"60",levelDistance:""}],defaultExpandHolderPosition:"right",defaultNodeShape:1,defaultNodeWidth:100,defaultLineShape:4,defaultJunctionPoint:"lr",defaultNodeBorderWidth:0,defaultLineColor:"rgba(0, 186, 189, 1)",defaultNodeColor:"rgba(0, 206, 209, 1)"};f(()=>{p()});const p=async()=>{const a={rootId:"a",nodes:[{id:"a",text:"a",children:[{id:"b",text:"b",children:[{id:"b1",text:"b1",children:[{id:"b1-1",text:"b1-1"},{id:"b1-2",text:"b1-2"},{id:"b1-3",text:"b1-3"},{id:"b1-4",text:"b1-4"},{id:"b1-5",text:"b1-5"},{id:"b1-6",text:"b1-6"}]},{id:"b2",text:"b2",children:[{id:"b2-1",text:"b2-1"},{id:"b2-2",text:"b2-2"}]}]},{id:"c",text:"c",children:[{id:"c1",text:"c1"},{id:"c2",text:"c2"},{id:"c3",text:"c3"}]}]}],lines:[]};console.log(JSON.stringify(a)),o.value=!1;const t=s.value.getInstance();await t.setJsonData(a),await t.moveToCenter(),await t.zoomToFit()};return(a,t)=>{const h=y("loading");return n(),l("div",I,[b((n(),l("div",S,[x(m(_),{ref_key:"graphRef",ref:s,options:c},{"graph-plug":g(()=>[k]),_:1},512)])),[[h,o.value]])])}}});const j=N(C,[["__scopeId","data-v-636108b5"]]);export{j as default};
