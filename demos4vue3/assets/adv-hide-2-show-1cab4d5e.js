import{M as y}from"./relation-graph-de73bd62.js";import{d as k,r as o,a as b,c as f,e as t,w as i,b as h,f as l,i as u,l as w,u as N,m as C}from"./index-e1681cb0.js";const T=h("div",{style:{padding:"20px",color:"#666666",width:"600px"}},[l(" This example will help you deal with a scenario where the graph is not displayed by default and is only displayed after clicking on an action (such as a button or tab). This requires special handling to avoid display issues (such as nodes not showing or lines being messy). The main logic for handling this is as follows: "),h("div",null," For example, when you click on button A to display the graph, you need to call the graph's refresh() method using this.$nextTick() after displaying the graph by clicking on button A. This will ensure that the graph is displayed correctly. Please refer to the code in the current demo for more details. ")],-1),L={style:{height:"calc(100vh - 300px)"}},D=k({__name:"adv-hide-2-show",setup(I){const r=o(),s=o(!0),d=o(!1),a=o("base"),m={layouts:[{label:"Center",layoutName:"tree",layoutClassName:"seeks-layout-center",defaultJunctionPoint:"border",defaultNodeShape:0,defaultLineShape:1,from:"left",max_per_width:"300",min_per_height:"40"}],defaultLineMarker:{markerWidth:12,markerHeight:12,refX:6,refY:6,data:"M2,2 L10,6 L2,10 L6,6 L2,2"},defaultExpandHolderPosition:"right",defaultNodeShape:1,defaultNodeWidth:100,defaultLineShape:4,defaultJunctionPoint:"lr",defaultNodeBorderWidth:0,defaultLineColor:"rgba(0, 186, 189, 1)",defaultNodeColor:"rgba(0, 206, 209, 1)"},p=async()=>{const c={rootId:"a",nodes:[{id:"a",text:"a"},{id:"b",text:"b"},{id:"b1",text:"b1"},{id:"b1-1",text:"b1-1"},{id:"b1-2",text:"b1-2"},{id:"b1-3",text:"b1-3"},{id:"b1-4",text:"b1-4"},{id:"b1-5",text:"b1-5"},{id:"b1-6",text:"b1-6"},{id:"b2",text:"b2"},{id:"b2-1",text:"b2-1"},{id:"b2-2",text:"b2-2"},{id:"c",text:"c"},{id:"c1",text:"c1"},{id:"c2",text:"c2"},{id:"c3",text:"c3"}],lines:[{from:"a",to:"b"},{from:"b",to:"b1"},{from:"b1",to:"b1-1"},{from:"b1",to:"b1-2"},{from:"b1",to:"b1-3"},{from:"b1",to:"b1-4"},{from:"b1",to:"b1-5"},{from:"b1",to:"b1-6"},{from:"b",to:"b2"},{from:"b2",to:"b2-1"},{from:"b2",to:"b2-2"},{from:"a",to:"c"},{from:"c",to:"c1"},{from:"c",to:"c2"},{from:"c",to:"c3"}]},e=r.value.getInstance();await e.setJsonData(c),await e.refresh(),s.value=!1},g=()=>{console.log("this.activeTabName:",a.value),a.value==="relation"&&(d.value||(d.value=!0,setTimeout(()=>{p()},1e3)))};return(c,e)=>{const n=u("el-tab-pane"),_=u("el-tabs"),x=C("loading");return b(),f("div",null,[T,t(_,{modelValue:a.value,"onUpdate:modelValue":e[0]||(e[0]=v=>a.value=v),type:"card",onTabChange:g},{default:i(()=>[t(n,{label:"Basic Information",name:"base"},{default:i(()=>[l("Basic Information ")]),_:1}),t(n,{label:"Relation Graph (Click Here)",name:"relation"},{default:i(()=>[w((b(),f("div",L,[t(N(y),{ref_key:"graphRef",ref:r,options:m},null,512)])),[[x,s.value]])]),_:1}),t(n,{label:"Risk Information",name:"risk"},{default:i(()=>[l("Risk Information")]),_:1})]),_:1},8,["modelValue"])])}}});export{D as default};
